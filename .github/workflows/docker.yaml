name: Varken
on:
  schedule:
    - cron: '0 10 * * *'
  push:
    branches:
      - master
      - develop
    tags: 
      - 'v*.*.*'
    paths:
      - '.github/workflows/docker.yaml'
      - 'varken/**'
      - 'Varken.py'
      - 'Dockerfile'
  pull_request:
    branches:
      - master
      - develop
    paths:
      - '.github/workflows/docker.yaml'
      - 'varken/**'
      - 'Varken.py'
      - 'Dockerfile'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Use this tag instead of most recent'
        required: false
      ignore-existing-tag:
        description: 'Ignore existing tag if "true"'
        required: false
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Lint
        run: pip install flake8 && flake8 --max-line-length 120 Varken.py varken/*.py
  build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      ##################
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:master
      ##################
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      ##################
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      ##################
      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          pull: true
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max